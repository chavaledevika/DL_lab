//cell1
from pandas import read_csv
import numpy as np
from keras.models import Sequential
from keras.layers import Dense, SimpleRNN
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
import math
import matplotlib.pyplot as plt

//cell2
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN,Dense
from tensorflow.keras.initializers import Constant

//cell3
# input sequence: 3 time steps,1 feature each
x=np.array([[1],[2],[3]]) #shape:(3,1)
x=x.reshape((1,3,1)) #shape:(1,3,1)

//cell4
#Build model with 2 hidden units and linear activation
model=Sequential([
SimpleRNN(
units=2,
input_shape=(3,1),
return_sequences=False,
),
Dense(1,activation='linear')
])

//cell5
#compile the model
model.compile(optimizer='adam',loss='mse')

//cell6
#show model summary and weights before training
model.summary()

//cell7
#make a prediction ( no trainng done)
y_pred=model.predict(x)
print("prediction :",y_pred)

//cell8
def create_RNN(hidden_units, input_shape, dense_units, activation):
 model = Sequential()
 model.add(SimpleRNN(hidden_units, input_shape=input_shape, activation=activation[0]))
 model.add(Dense(units=dense_units, activation=activation[1]))
 model.compile(loss='mean_squared_error', optimizer='adam')
 return model

//cell9
# Call create_RNN to instantiate the model
demo_model = create_RNN(2, (3, 1), 1, activation=['linear', 'linear']) # Fix: Provide dense_units and correct input_shape

//cell10
wx=demo_model.get_weights()[0]
wh=demo_model.get_weights()[1]
bh=demo_model.get_weights()[2]
wy=demo_model.get_weights()[3]
by=demo_model.get_weights()[4]
print("wx",wx)
print("wh",wh)
print("bh",bh)
print("wy",wy)
print("by",by)

//cell11
x=np.array([1,2,3])
#Reshape the input to the required sample_size x time_steps x features
x_input=np.reshape(x,(1,3,1))
y_pred_model=demo_model.predict(x_input)

m=2
h0=np.zeros(m)
h1=np.dot(x[0],wx)+h0+bh
h2=np.dot(x[1],wx)+np.dot(h1,wh)+bh
h3=np.dot(x[2],wx)+np.dot(h2,wh)+bh
o3=np.dot(h3,wy)+by

print("h1=",h1,'h2=',h2,'h3=',h3)
print("Prection from network",y_pred_model)
print("Prediction from our computation",o3)
