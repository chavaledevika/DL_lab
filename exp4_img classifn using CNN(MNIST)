//cell1
#MNIST classification using CNN in tensorflow/keras
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D from tensorflow.keras.utils import plot_model from google.colab import
drive
drive.mount('/content/drive')

//cell2
#Load MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()

//cell3
#Normalize pixel values to 0-1
x_train, x_test = x_train / 255.0, x_test / 255.0

//cell4
#Reshape to fit CNN input shape
x_train = x_train.reshape(-1, 28, 28, 1)
x_tetst = x_test.reshape(-1, 28, 28, 1)

//cell5
#one hot encode labels
y_train = tf.keras.utils.to_categorical(y_train, 10)
y_test = tf.keras.utils.to_categorical(y_test, 10)

//cell6
#Build CNN model
model = Sequential([
Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
MaxPooling2D(2, 2),
Conv2D(64, (3, 3), activation='relu'),
MaxPooling2D(2, 2),
Flatten(),
Dense(128, activation='relu'),
Dropout(0.5),
Dense(10, activation='softmax') #output layer for 10 digit classes
])

//cell7
#print model architecture
model.summary()
plot_model(model,show_shapes=True,show_layer_names=True)

//cell8
#visualie model as a diagram
plot_model(model, to_file="model_architecture.png", show_shapes=True, show_layer_names=True)

//cell9
#Compile the Model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

//cell10
#Train the Model
model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=10, batch_size=64)

//cell11
#Evaluate the Model
test_loss, test_acc = model.evaluate(x_test, y_test)
print(f"Test accuracy:{test_acc * 100:.2f}%")

//cell12
#save model
model.save("/content/drive/MyDrive/mnist_cnn_model.h5")
print("model saved successfully!")
#predict on test images
predictions = model.predict(x_test[:10])

exp4-MNIST-CNN
//cell1
#plot some predictions
fig, axes = plt.subplots(2, 5, figsize=(10, 5))
for i, ax in enumerate(axes.flat):
ax.imshow(x_test[i].reshape(28, 28), cmap='gray')
ax.set_title(f"Predicted: {np.argmax(predictions[i])}")
ax.axis('off')
plt.show()

//cell2
plot_model(model,show_shapes=True,show_layer_names=True)
