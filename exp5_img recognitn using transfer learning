//cell1
import tensorflow_datasets as tfds
import tensorflow as tf

//cell2
 (train_ds, train_labels),(test_ds,test_labels)= tfds.load(
 "tf_flowers",
 split=["train[:70%]","train[:30%]"], #train test split
 batch_size=-1,
 as_supervised=True, #include labels
 )

//cell3
 train_ds=tf.image.resize(train_ds,(150,150))
 test_ds=tf.image.resize(test_ds,(150,150))
 train_labels=tf.keras.utils.to_categorical(train_labels,num_classes=5)
 test_labels=tf.keras.utils.to_categorical(test_labels,num_classes=5)

//cell4
 from tensorflow.keras.applications.vgg16 import VGG16
 from tensorflow.keras.applications.vgg16 import preprocess_input

//cell5
 base_model=VGG16(weights="imagenet",include_top=False,
 input_shape=train_ds[0].shape)
 base_model.trainable=False #not trainable weights
 #preprocessing input
 train_ds=preprocess_input(train_ds)
 test_ds=preprocess_input(test_ds)

//cell6
 base_model.summary()

//cell7
 from tensorflow.keras import layers,models
 flatten_layer=layers.Flatten()
 dense_layer_1=layers.Dense(50,activation="relu")
 dense_layer_2=layers.Dense(20,activation="relu")
 prediction_layer=layers.Dense(5,activation="softmax")
 model=models.Sequential([
  base_model,
  flatten_layer,
  dense_layer_1,
  dense_layer_2,
  prediction_layer
 ])

//cell8
 from tensorflow.keras.callbacks import EarlyStopping
 model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
 model.fit(train_ds,train_labels,epochs=2)

//cell9
 model.predict(test_ds[:2])




